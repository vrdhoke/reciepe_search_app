{"version":3,"sources":["logo.svg","components/Recipe.js","components/NameForm.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","name","className","map","i","key","Card","style","width","flex","Img","variant","height","src","thumbnail","onError","e","target","onerror","Body","Title","title","Text","href","Button","NameForm","props","handleChange","preventDefault","setState","value","handleSubmit","event","fetchRecipe","state","ingred","query","submitted","recipeList","bind","console","log","fetch","this","then","res","json","response","results","length","error","fontFamily","color","Form","onSubmit","paddingLeft","Row","Col","xs","InputGroup","Prepend","Control","id","placeholder","onChange","Label","htmlFor","srOnly","FormControl","type","renderRecipe","React","Component","Main","exact","path","component","Header","Carousel","Item","alt","Caption","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a9dfd436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Card,Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction Recipe({name}) {\n    return (\n        <div className='row'>\n          {name.map((name,i) => (\n          <div key={i} className='col-md-3'>\n            <Card style={{ width: '21rem',flex: 1 }} >\n            <Card.Img variant=\"top\" style={{ height: '13rem'}} src={name.thumbnail} onError={(e)=>{e.target.onerror = null; e.target.src=\"https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?ixlib=rb-1.2.1&w=1000&q=80\"}}/>\n            <Card.Body>\n                <Card.Title>{name.title}</Card.Title>\n                <Card.Text>\n                Some quick example text to build on the card title and make up the bulk of\n                the card's content.\n                </Card.Text>\n                <a href={name.href} target=\"__blank\"><Button variant=\"primary\">See Recipe</Button></a>\n            </Card.Body>\n            </Card>    \n          </div>\n          ))}\n        </div>\n      );\n}\n\nexport default Recipe","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Col from 'react-bootstrap/Col'\nimport Recipe from '../components/Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {ingred: '',query:'',submitted: false,recipeList:[]};\n   \n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n handleChange = (e) => {\n    e.preventDefault();\n    this.setState({[e.target.name]:e.target.value})\n }\n handleSubmit = (event)=>{\n    event.preventDefault();\n    \n    this.fetchRecipe();\n } \n//  componentDidMount() {\n//   this.setState({ submitted: true });\n// }\n  async fetchRecipe () {\n    \n    // alert('A name was submitted: ' + this.state.value);\n    console.log(\"Vaibhav1\");\n    // this.setState({ submitted: true })\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    await fetch(proxyurl+`http://www.recipepuppy.com/api/?i=${this.state.ingred}&q=${this.state.query}`)\n          .then(res => res.json())\n          .then((response)=>{\n                console.log(response.results);\n                this.setState({recipeList:response.results});\n                this.setState({ submitted: true });\n                console.log(this.state.recipeList.length);\n          },\n          (error) => {\n            console.log(error);\n          });\n    console.log(\"Vaibhav2\");\n    \n  }\n \n  renderRecipe() { \n      console.log(this.state.submitted+\"submitted\");\n      console.log(this.state.recipeList.length+\"Vaibhav\"); \n    return(\n    <div>\n      <br/>\n    <h3 style={{ fontFamily:\"monospace\",color:\"gray\"}}>Recipes for you</h3><br/>\n    <Recipe name={this.state.recipeList} />\n    </div>);\n  } \n  render() {\n    return (\n    <div >\n      <h3 style={{ fontFamily:\"monospace\",color:\"gray\"}}>A guided recipe creation site, Just start typing Ingredients and dish name</h3>\n        <br/>\n        <Form onSubmit={this.handleSubmit} style={{ width: '80rem',flex: 1,paddingLeft:400 }}>\n          <Form.Row className=\"align-items-center\">\n            <Col xs=\"auto\">\n              <InputGroup className=\"mb-2\">\n              <InputGroup.Prepend>\n                  <InputGroup.Text>Ingredients</InputGroup.Text>\n              </InputGroup.Prepend>\n              <Form.Control\n                id=\"inlineFormInput\"\n                placeholder=\"Enter ingredients\"\n                name=\"ingred\" onChange={this.handleChange}\n              />\n              </InputGroup>\n            </Col>\n            <Col xs=\"auto\">\n              <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n                Username\n              </Form.Label>\n              <InputGroup className=\"mb-2\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>Recipe</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl id=\"inlineFormInputGroup\" placeholder=\"Enter Recipe\" \n                name=\"query\" onChange={this.handleChange}/>\n              </InputGroup>\n            </Col>\n            <Col xs=\"auto\">\n              <Button type=\"submit\" className=\"mb-2\">\n                Submit\n              </Button>\n            </Col>\n          </Form.Row>\n        </Form>\n\n      {/* <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" name=\"ingred\" onChange={this.handleChange} />\n          <input type=\"text\" name=\"query\" onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form> */}\n      {this.state.submitted && this.renderRecipe()}      \n      </div>\n    );\n  }\n}\n\n\n\n\n// export default function MoviesList() {\n//     const [error, setError] = useState(null);\n//     const [isLoaded, setIsLoaded] = useState(false);\n//     const [movies, setMovies] = useState([]);\n//     useEffect(() => {\n//       const fetchMovies = async() => {\n//         await fetch(\"https://swapi.dev/api/films/\")\n//           .then(res => res.json())\n//           .then(\n//             (filmResponse) => {\n//               setIsLoaded(true);\n//               // Sorting Films returned from API in ascending order\n//               const filmsSortedByReleaseDate = filmResponse.results.sort((film1, film2) =>\n//                film1.release_date.substring(0, 4) - film2.release_date.substring(0, 4));\n//                setMovies(filmsSortedByReleaseDate);\n//             },\n//             (error) => {\n//               setIsLoaded(true);\n//               setError(error);\n//             }\n//           )\n//       }\n//       fetchMovies();\n//     },[])\n  \n\n//     if (error) {\n//       return <div>Error: {error.message}</div>;\n//     } else if (!isLoaded) {\n//       return <div>\n//         <img className=\"loadingGif\" src=\"https://i.pinimg.com/originals/a7/b0/15/a7b015d343ad801ad6da8c242dc6ae06.gif\" alt=\"Loading...\" /></div>;\n//     } else {\n//       return (\n//         <div>\n//         <Card style={{ width: '18rem' }}>\n//             <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n//             <Card.Body>\n//                 <Card.Title>Card Title</Card.Title>\n//                 <Card.Text>\n//                 Some quick example text to build on the card title and make up the bulk of\n//                 the card's content.\n//                 </Card.Text>\n//                 <Button variant=\"primary\">Go somewhere</Button>\n//             </Card.Body>\n//             </Card>\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Name:\n//           <input type=\"text\" name=\"ingred\" value={this.state.ingred} onChange={this.handleChange} />\n//           <input type=\"text\" name=\"query\" value={this.state.query} onChange={this.handleChange} />\n//         </label>\n//         <input type=\"submit\" value=\"Submit\" />\n//       </form>\n//       </div>\n//       );\n//     }\n//   }","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n// import MoviesList from './MoviesList'\nimport NameForm from '../components/NameForm';\nexport default function Main() {\n    return (\n      <div>\n        <Router>\n          <Route exact path='/' component={NameForm}/>\n        </Router>\n      </div>\n    );\n  }","import React from 'react';\n\n\nimport Carousel from 'react-bootstrap/Carousel'\nfunction Header() {\n  return (\n    \n      <Carousel style={{width: 1440, height: 550}}>\n          <Carousel.Item>\n            <img\n            style={{height: 500}}\n            className=\"d-block w-100\"\n            src=\"https://www.aspca.org/sites/default/files/apcc_people-foods-to-avoid_main-image.jpg\"\n            alt=\"Third slide\"\n            />\n\n            <Carousel.Caption>\n            <h3>Puppy Recipe</h3>\n            <p>Its the best way to create and customize your favorite dish.</p>\n            </Carousel.Caption>\n        </Carousel.Item>\n        <Carousel.Item>\n            <img style={{height: 500}}\n            className=\"d-block w-100\"\n            src=\"https://www.foreverlawn.com/wp-content/uploads/2018/05/Corgis-04.jpg\"\n            alt=\"First slide\"\n            />\n            <Carousel.Caption>\n            <h3>Puppy Recipe</h3>\n            <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n            </Carousel.Caption>\n        </Carousel.Item>\n        <Carousel.Item>\n            <img\n            style={{height: 500}}\n            className=\"d-block w-100\"\n            src=\"https://i.imgur.com/5yq0G.jpg\"\n            alt=\"Third slide\"\n            />\n\n            <Carousel.Caption>\n            <h3>Puppy Recipe</h3>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            </Carousel.Caption>\n        </Carousel.Item>\n        <Carousel.Item>\n            <img\n            style={{height: 500}}\n            className=\"d-block w-100\"\n            src=\"https://d1axrjtp4ik438.cloudfront.net/question_photo_editorial_thumb/uploads/questions/35163/images/1544888291-dog-food.jpg\"\n            alt=\"Third slide\"\n            />\n\n            <Carousel.Caption>\n            <h3>Puppy Recipe</h3>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            </Carousel.Caption>\n        </Carousel.Item>\n    </Carousel>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\nimport Header from './components/Header';\nfunction App() {\n  return (\n    <div>\n    \n    <div className=\"App\">\n      {/* <header className=\"\"> */}\n        <Header/>\n        <Main/>\n      {/* </header> */}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}